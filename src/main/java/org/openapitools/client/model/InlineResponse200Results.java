/*
 * PassFort API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 4.0.0
 * Contact: support@passfort.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

/**
 * InlineResponse200Results
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2019-02-06T16:01:27.451+11:00[Australia/Sydney]")
public class InlineResponse200Results {
  @JsonProperty("id")
  private String id;

  @JsonProperty("query_substrings")
  private List<List<BigDecimal>> querySubstrings = null;

  @JsonProperty("text")
  private String text;

  public InlineResponse200Results id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The match ID, used to get the full address
   * @return id
  **/
  @ApiModelProperty(required = true, value = "The match ID, used to get the full address")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public InlineResponse200Results querySubstrings(List<List<BigDecimal>> querySubstrings) {
    this.querySubstrings = querySubstrings;
    return this;
  }

  public InlineResponse200Results addQuerySubstringsItem(List<BigDecimal> querySubstringsItem) {
    if (this.querySubstrings == null) {
      this.querySubstrings = new ArrayList<List<BigDecimal>>();
    }
    this.querySubstrings.add(querySubstringsItem);
    return this;
  }

   /**
   * An array of two-tuples containing indices that mark the start and end of where the query matches in the suggested address
   * @return querySubstrings
  **/
  @ApiModelProperty(value = "An array of two-tuples containing indices that mark the start and end of where the query matches in the suggested address")
  public List<List<BigDecimal>> getQuerySubstrings() {
    return querySubstrings;
  }

  public void setQuerySubstrings(List<List<BigDecimal>> querySubstrings) {
    this.querySubstrings = querySubstrings;
  }

  public InlineResponse200Results text(String text) {
    this.text = text;
    return this;
  }

   /**
   * A sample of the address, to get the full address use /address/format
   * @return text
  **/
  @ApiModelProperty(required = true, value = "A sample of the address, to get the full address use /address/format")
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse200Results inlineResponse200Results = (InlineResponse200Results) o;
    return Objects.equals(this.id, inlineResponse200Results.id) &&
        Objects.equals(this.querySubstrings, inlineResponse200Results.querySubstrings) &&
        Objects.equals(this.text, inlineResponse200Results.text);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, querySubstrings, text);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse200Results {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    querySubstrings: ").append(toIndentedString(querySubstrings)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

