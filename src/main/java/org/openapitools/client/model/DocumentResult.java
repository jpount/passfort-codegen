/*
 * PassFort API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 4.0.0
 * Contact: support@passfort.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.DocumentCheck;
import org.openapitools.client.model.DocumentResultFieldChecks;

/**
 * Results of a check on a document
 */
@ApiModel(description = "Results of a check on a document")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2019-02-06T16:01:27.451+11:00[Australia/Sydney]")
public class DocumentResult {
  @JsonProperty("provider_name")
  private String providerName;

  @JsonProperty("image_checks_passed")
  private Boolean imageChecksPassed;

  @JsonProperty("image_checks")
  private List<DocumentCheck> imageChecks = null;

  @JsonProperty("document_type_passed")
  private Boolean documentTypePassed;

  @JsonProperty("forgery_checks_passed")
  private Boolean forgeryChecksPassed;

  @JsonProperty("forgery_checks")
  private List<DocumentCheck> forgeryChecks = null;

  @JsonProperty("field_checks")
  private List<DocumentResultFieldChecks> fieldChecks = null;

  @JsonProperty("all_passed")
  private Boolean allPassed;

  @JsonProperty("error_reason")
  private String errorReason;

  public DocumentResult providerName(String providerName) {
    this.providerName = providerName;
    return this;
  }

   /**
   * Name of the verification provider
   * @return providerName
  **/
  @ApiModelProperty(value = "Name of the verification provider")
  public String getProviderName() {
    return providerName;
  }

  public void setProviderName(String providerName) {
    this.providerName = providerName;
  }

  public DocumentResult imageChecksPassed(Boolean imageChecksPassed) {
    this.imageChecksPassed = imageChecksPassed;
    return this;
  }

   /**
   * Whether all of the image checks passed. These cover aspects such as the resolution and clarity of the image(s)
   * @return imageChecksPassed
  **/
  @ApiModelProperty(value = "Whether all of the image checks passed. These cover aspects such as the resolution and clarity of the image(s)")
  public Boolean getImageChecksPassed() {
    return imageChecksPassed;
  }

  public void setImageChecksPassed(Boolean imageChecksPassed) {
    this.imageChecksPassed = imageChecksPassed;
  }

  public DocumentResult imageChecks(List<DocumentCheck> imageChecks) {
    this.imageChecks = imageChecks;
    return this;
  }

  public DocumentResult addImageChecksItem(DocumentCheck imageChecksItem) {
    if (this.imageChecks == null) {
      this.imageChecks = new ArrayList<DocumentCheck>();
    }
    this.imageChecks.add(imageChecksItem);
    return this;
  }

   /**
   * Detailed result for each of the image checks performed
   * @return imageChecks
  **/
  @ApiModelProperty(value = "Detailed result for each of the image checks performed")
  public List<DocumentCheck> getImageChecks() {
    return imageChecks;
  }

  public void setImageChecks(List<DocumentCheck> imageChecks) {
    this.imageChecks = imageChecks;
  }

  public DocumentResult documentTypePassed(Boolean documentTypePassed) {
    this.documentTypePassed = documentTypePassed;
    return this;
  }

   /**
   * If the document is of the correct type
   * @return documentTypePassed
  **/
  @ApiModelProperty(value = "If the document is of the correct type")
  public Boolean getDocumentTypePassed() {
    return documentTypePassed;
  }

  public void setDocumentTypePassed(Boolean documentTypePassed) {
    this.documentTypePassed = documentTypePassed;
  }

  public DocumentResult forgeryChecksPassed(Boolean forgeryChecksPassed) {
    this.forgeryChecksPassed = forgeryChecksPassed;
    return this;
  }

   /**
   * Whether all of the forgery checks passed. These vary by provider, but may include details such as whether the correct fonts were used on the document
   * @return forgeryChecksPassed
  **/
  @ApiModelProperty(value = "Whether all of the forgery checks passed. These vary by provider, but may include details such as whether the correct fonts were used on the document")
  public Boolean getForgeryChecksPassed() {
    return forgeryChecksPassed;
  }

  public void setForgeryChecksPassed(Boolean forgeryChecksPassed) {
    this.forgeryChecksPassed = forgeryChecksPassed;
  }

  public DocumentResult forgeryChecks(List<DocumentCheck> forgeryChecks) {
    this.forgeryChecks = forgeryChecks;
    return this;
  }

  public DocumentResult addForgeryChecksItem(DocumentCheck forgeryChecksItem) {
    if (this.forgeryChecks == null) {
      this.forgeryChecks = new ArrayList<DocumentCheck>();
    }
    this.forgeryChecks.add(forgeryChecksItem);
    return this;
  }

   /**
   * Detailed result for each of the forgery checks performed
   * @return forgeryChecks
  **/
  @ApiModelProperty(value = "Detailed result for each of the forgery checks performed")
  public List<DocumentCheck> getForgeryChecks() {
    return forgeryChecks;
  }

  public void setForgeryChecks(List<DocumentCheck> forgeryChecks) {
    this.forgeryChecks = forgeryChecks;
  }

  public DocumentResult fieldChecks(List<DocumentResultFieldChecks> fieldChecks) {
    this.fieldChecks = fieldChecks;
    return this;
  }

  public DocumentResult addFieldChecksItem(DocumentResultFieldChecks fieldChecksItem) {
    if (this.fieldChecks == null) {
      this.fieldChecks = new ArrayList<DocumentResultFieldChecks>();
    }
    this.fieldChecks.add(fieldChecksItem);
    return this;
  }

   /**
   * These checks ascertain whether the details extracted from the document are valid, and match those submitted on the profile
   * @return fieldChecks
  **/
  @ApiModelProperty(value = "These checks ascertain whether the details extracted from the document are valid, and match those submitted on the profile")
  public List<DocumentResultFieldChecks> getFieldChecks() {
    return fieldChecks;
  }

  public void setFieldChecks(List<DocumentResultFieldChecks> fieldChecks) {
    this.fieldChecks = fieldChecks;
  }

  public DocumentResult allPassed(Boolean allPassed) {
    this.allPassed = allPassed;
    return this;
  }

   /**
   * Whether all of the image, forgery and field checks passed
   * @return allPassed
  **/
  @ApiModelProperty(value = "Whether all of the image, forgery and field checks passed")
  public Boolean getAllPassed() {
    return allPassed;
  }

  public void setAllPassed(Boolean allPassed) {
    this.allPassed = allPassed;
  }

  public DocumentResult errorReason(String errorReason) {
    this.errorReason = errorReason;
    return this;
  }

   /**
   * Message indicating why the document could not be checked
   * @return errorReason
  **/
  @ApiModelProperty(value = "Message indicating why the document could not be checked")
  public String getErrorReason() {
    return errorReason;
  }

  public void setErrorReason(String errorReason) {
    this.errorReason = errorReason;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentResult documentResult = (DocumentResult) o;
    return Objects.equals(this.providerName, documentResult.providerName) &&
        Objects.equals(this.imageChecksPassed, documentResult.imageChecksPassed) &&
        Objects.equals(this.imageChecks, documentResult.imageChecks) &&
        Objects.equals(this.documentTypePassed, documentResult.documentTypePassed) &&
        Objects.equals(this.forgeryChecksPassed, documentResult.forgeryChecksPassed) &&
        Objects.equals(this.forgeryChecks, documentResult.forgeryChecks) &&
        Objects.equals(this.fieldChecks, documentResult.fieldChecks) &&
        Objects.equals(this.allPassed, documentResult.allPassed) &&
        Objects.equals(this.errorReason, documentResult.errorReason);
  }

  @Override
  public int hashCode() {
    return Objects.hash(providerName, imageChecksPassed, imageChecks, documentTypePassed, forgeryChecksPassed, forgeryChecks, fieldChecks, allPassed, errorReason);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentResult {\n");
    
    sb.append("    providerName: ").append(toIndentedString(providerName)).append("\n");
    sb.append("    imageChecksPassed: ").append(toIndentedString(imageChecksPassed)).append("\n");
    sb.append("    imageChecks: ").append(toIndentedString(imageChecks)).append("\n");
    sb.append("    documentTypePassed: ").append(toIndentedString(documentTypePassed)).append("\n");
    sb.append("    forgeryChecksPassed: ").append(toIndentedString(forgeryChecksPassed)).append("\n");
    sb.append("    forgeryChecks: ").append(toIndentedString(forgeryChecks)).append("\n");
    sb.append("    fieldChecks: ").append(toIndentedString(fieldChecks)).append("\n");
    sb.append("    allPassed: ").append(toIndentedString(allPassed)).append("\n");
    sb.append("    errorReason: ").append(toIndentedString(errorReason)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

