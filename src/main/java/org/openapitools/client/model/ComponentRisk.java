/*
 * PassFort API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 4.0.0
 * Contact: support@passfort.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.RiskLevel;

/**
 * A component making up part of the total risk score
 */
@ApiModel(description = "A component making up part of the total risk score")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2019-02-06T16:01:27.451+11:00[Australia/Sydney]")
public class ComponentRisk {
  @JsonProperty("name")
  private String name;

  @JsonProperty("input_value")
  private String inputValue;

  @JsonProperty("required")
  private Boolean required;

  @JsonProperty("risk_level")
  private RiskLevel riskLevel = null;

  @JsonProperty("raw_value")
  private String rawValue;

  @JsonProperty("min_overall_score")
  private BigDecimal minOverallScore;

  @JsonProperty("errors")
  private List<Error> errors = null;

  public ComponentRisk name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Risk component name
   * @return name
  **/
  @ApiModelProperty(required = true, value = "Risk component name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public ComponentRisk inputValue(String inputValue) {
    this.inputValue = inputValue;
    return this;
  }

   /**
   * The calculated value from the users profile used for this risk component
   * @return inputValue
  **/
  @ApiModelProperty(value = "The calculated value from the users profile used for this risk component")
  public String getInputValue() {
    return inputValue;
  }

  public void setInputValue(String inputValue) {
    this.inputValue = inputValue;
  }

  public ComponentRisk required(Boolean required) {
    this.required = required;
    return this;
  }

   /**
   * If this risk component is required a risk score will not be calculated until the data to calculate this component is available
   * @return required
  **/
  @ApiModelProperty(value = "If this risk component is required a risk score will not be calculated until the data to calculate this component is available")
  public Boolean getRequired() {
    return required;
  }

  public void setRequired(Boolean required) {
    this.required = required;
  }

  public ComponentRisk riskLevel(RiskLevel riskLevel) {
    this.riskLevel = riskLevel;
    return this;
  }

   /**
   * Get riskLevel
   * @return riskLevel
  **/
  @ApiModelProperty(required = true, value = "")
  public RiskLevel getRiskLevel() {
    return riskLevel;
  }

  public void setRiskLevel(RiskLevel riskLevel) {
    this.riskLevel = riskLevel;
  }

  public ComponentRisk rawValue(String rawValue) {
    this.rawValue = rawValue;
    return this;
  }

   /**
   * The calculated value from the users profile used for this risk component
   * @return rawValue
  **/
  @ApiModelProperty(value = "The calculated value from the users profile used for this risk component")
  public String getRawValue() {
    return rawValue;
  }

  public void setRawValue(String rawValue) {
    this.rawValue = rawValue;
  }

  public ComponentRisk minOverallScore(BigDecimal minOverallScore) {
    this.minOverallScore = minOverallScore;
    return this;
  }

   /**
   * Unused field
   * @return minOverallScore
  **/
  @ApiModelProperty(value = "Unused field")
  public BigDecimal getMinOverallScore() {
    return minOverallScore;
  }

  public void setMinOverallScore(BigDecimal minOverallScore) {
    this.minOverallScore = minOverallScore;
  }

  public ComponentRisk errors(List<Error> errors) {
    this.errors = errors;
    return this;
  }

  public ComponentRisk addErrorsItem(Error errorsItem) {
    if (this.errors == null) {
      this.errors = new ArrayList<Error>();
    }
    this.errors.add(errorsItem);
    return this;
  }

   /**
   * An array of errors that occurred when attempting to calculate risk.
   * @return errors
  **/
  @ApiModelProperty(value = "An array of errors that occurred when attempting to calculate risk.")
  public List<Error> getErrors() {
    return errors;
  }

  public void setErrors(List<Error> errors) {
    this.errors = errors;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComponentRisk componentRisk = (ComponentRisk) o;
    return Objects.equals(this.name, componentRisk.name) &&
        Objects.equals(this.inputValue, componentRisk.inputValue) &&
        Objects.equals(this.required, componentRisk.required) &&
        Objects.equals(this.riskLevel, componentRisk.riskLevel) &&
        Objects.equals(this.rawValue, componentRisk.rawValue) &&
        Objects.equals(this.minOverallScore, componentRisk.minOverallScore) &&
        Objects.equals(this.errors, componentRisk.errors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, inputValue, required, riskLevel, rawValue, minOverallScore, errors);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComponentRisk {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    inputValue: ").append(toIndentedString(inputValue)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    riskLevel: ").append(toIndentedString(riskLevel)).append("\n");
    sb.append("    rawValue: ").append(toIndentedString(rawValue)).append("\n");
    sb.append("    minOverallScore: ").append(toIndentedString(minOverallScore)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

